package com.example.plugins

import io.ktor.serialization.kotlinx.json.*
import io.ktor.server.application.*
import io.ktor.server.plugins.contentnegotiation.*
import kotlinx.serialization.json.Json

/**
 * Configuraci√≥n de serializaci√≥n JSON para la API
 * Maneja la conversi√≥n autom√°tica entre objetos Kotlin ‚Üî JSON
 */
fun Application.configureSerialization() {

    install(ContentNegotiation) {

        // üìÑ Configurar JSON como formato principal
        json(Json {

            // üé® Pretty printing - JSON formateado y legible
            // En desarrollo: true para debugging f√°cil
            // En producci√≥n: false para menor tama√±o
            prettyPrint = true

            // üîß Ser flexible con JSON de entrada
            // Permite JSON con formato relajado (comentarios, trailing commas, etc.)
            isLenient = true

            // üö´ Ignorar campos desconocidos
            // Si Android env√≠a campos extra que no est√°n en el DTO, no fallar
            ignoreUnknownKeys = true

            // üìù Usar nombres de propiedades por defecto
            // No transformar camelCase ‚Üî snake_case autom√°ticamente
            useAlternativeNames = false

            // üî§ Codificaci√≥n de caracteres especiales
            // Permitir caracteres Unicode sin escapar
            encodeDefaults = true

            // ‚ö° Modo de serializaci√≥n de clases selladas
            // Usar discriminator por defecto para polimorfismo
            useArrayPolymorphism = false

            // üõ°Ô∏è Permitir valores null expl√≠citos en JSON
            // Serializar campos null como "field": null en lugar de omitirlos
            explicitNulls = true

            // üéØ Estrategia para enum classes
            // Usar nombre del enum en lugar de ordinal
            // classDiscriminator = "type"
        })

        // üìã Configuraciones adicionales si necesitas otros formatos
        // xml() // Para XML si lo necesitas en el futuro
        // cbor() // Para datos binarios compactos
    }
}


/**
 * Extensi√≥n para serializar objetos manualmente
 * √ötil para logging o debugging
 */
fun Any.toJsonString(prettyPrint: Boolean = true): String {
    val json = Json {
        this.prettyPrint = prettyPrint
        ignoreUnknownKeys = true
        isLenient = true
    }
    return json.encodeToString(kotlinx.serialization.serializer(), this)
}

/**
 * Extensi√≥n para deserializar JSON manualmente
 * √ötil para procesar datos externos
 */
inline fun <reified T> String.fromJsonString(): T {
    val json = Json {
        ignoreUnknownKeys = true
        isLenient = true
    }
    return json.decodeFromString<T>(this)
}

/**
 * Configuraci√≥n espec√≠fica para APIs RESTful
 * Optimizada para comunicaci√≥n m√≥vil
 */
fun Application.configureRestApiSerialization() {
    install(ContentNegotiation) {
        json(Json {
            // üì± Optimizado para apps m√≥viles
            prettyPrint = false              // Menor tama√±o de respuesta
            ignoreUnknownKeys = true         // Flexibilidad en versioning de API
            isLenient = false               // Estricto para detectar errores del cliente
            encodeDefaults = false          // Omitir campos con valores por defecto
            explicitNulls = false           // Omitir campos null para menor tama√±o

            // üöÄ Performance optimizations
            useAlternativeNames = false     // No transformaciones de nombres
            useArrayPolymorphism = false    // Serializaci√≥n m√°s simple
        })
    }
}

/**
 * Validar que la serializaci√≥n est√° funcionando correctamente
 * √ötil para health checks
 */
fun testSerialization(): Map<String, Any> {
    return try {
        // Test object para serializar
        val testObject = mapOf(
            "message" to "Serialization test",
            "timestamp" to System.currentTimeMillis(),
            "success" to true,
            "data" to listOf("item1", "item2", "item3"),
            "nested" to mapOf(
                "key1" to "value1",
                "key2" to 42
            )
        )

        // Convertir a JSON y de vuelta
        val jsonString = testObject.toJsonString()
        val backToObject = jsonString.fromJsonString<Map<String, Any>>()

        mapOf(
            "success" to true,
            "message" to "Serializaci√≥n funcionando correctamente",
            "originalSize" to testObject.size,
            "serializedLength" to jsonString.length,
            "roundTripSuccess" to (testObject.keys == backToObject.keys)
        )

    } catch (e: Exception) {
        mapOf(
            "success" to false,
            "message" to "Error en serializaci√≥n",
            "error" to (e.message ?: "Error desconocido")
        )
    }
}

/**
 * Informaci√≥n sobre la configuraci√≥n actual de serializaci√≥n
 * Para debugging y monitoreo
 */
fun getSerializationInfo(): Map<String, Any> {
    return mapOf(
        "format" to "JSON",
        "library" to "kotlinx.serialization",
        "features" to listOf(
            "Pretty printing configurable",
            "Lenient parsing",
            "Ignore unknown keys",
            "Null handling configurable",
            "Unicode support"
        ),
        "contentTypes" to listOf(
            "application/json",
            "text/json"
        ),
        "encoding" to "UTF-8"
    )
}