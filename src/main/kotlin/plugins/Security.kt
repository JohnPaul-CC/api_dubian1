package com.example.plugins

import com.auth0.jwt.JWT
import com.auth0.jwt.algorithms.Algorithm
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.auth.jwt.*
import io.ktor.server.plugins.cors.routing.*
import io.ktor.http.*
import io.ktor.server.response.*
import java.util.*

/**
 * Configuraci√≥n de seguridad para la API
 * Incluye JWT authentication y CORS para conexi√≥n con Android
 */
fun Application.configureSecurity() {

    // üåê CONFIGURACI√ìN CORS - Para permitir requests desde Android
    install(CORS) {
        // M√©todos HTTP permitidos
        allowMethod(HttpMethod.Options)
        allowMethod(HttpMethod.Get)
        allowMethod(HttpMethod.Post)
        allowMethod(HttpMethod.Put)
        allowMethod(HttpMethod.Delete)
        allowMethod(HttpMethod.Patch)

        // Headers permitidos
        allowHeader(HttpHeaders.Authorization)     // Para JWT tokens
        allowHeader(HttpHeaders.ContentType)      // Para JSON
        allowHeader(HttpHeaders.Accept)           // Para response types
        allowHeader("X-Requested-With")          // Para frameworks JS

        // Permitir credentials (cookies, auth headers)
        allowCredentials = true

        // Hosts permitidos (en desarrollo permitir todo)
        anyHost() // ‚ö†Ô∏è En producci√≥n cambiar por dominios espec√≠ficos

        // En producci√≥n usar:
        // allowHost("tu-dominio.com")
        // allowHost("tu-app-android", schemes = listOf("http", "https"))
    }

    // üîê CONFIGURACI√ìN JWT
    val jwtConfig = JWTConfig()

    install(Authentication) {
        jwt("auth-jwt") {
            realm = jwtConfig.realm

            // Configurar verificador de tokens
            verifier(
                JWT.require(Algorithm.HMAC256(jwtConfig.secret))
                    .withAudience(jwtConfig.audience)
                    .withIssuer(jwtConfig.issuer)
                    .build()
            )

            // Validar el token y extraer informaci√≥n
            validate { credential ->
                try {
                    // Verificar que el token tiene los claims necesarios
                    val username = credential.payload.getClaim("username").asString()
                    val userId = credential.payload.getClaim("userId").asInt()

                    if (username != null && userId != null && userId > 0) {
                        // Token v√°lido - crear principal
                        JWTPrincipal(credential.payload)
                    } else {
                        // Token inv√°lido - faltan claims
                        null
                    }
                } catch (e: Exception) {
                    // Error procesando token - considerar inv√°lido
                    null
                }
            }

            // Configurar response cuando token es inv√°lido
            challenge { defaultScheme, realm ->         //FIXEADO
                call.respondText(
                    "Token inv√°lido o expirado",
                    status = HttpStatusCode.Unauthorized
                )
            }
        }
    }
}

/**
 * Configuraci√≥n centralizada para JWT
 * Facilita cambiar configuraci√≥n en un solo lugar
 */
private class JWTConfig {
    // üîë Clave secreta para firmar tokens
    // ‚ö†Ô∏è En producci√≥n usar variable de entorno
    val secret = "dubium-secret-key-2024-super-secure"

    // üè¢ Emisor del token (tu aplicaci√≥n)
    val issuer = "dubium-api"

    // üë• Audiencia del token (qui√©n puede usarlo)
    val audience = "dubium-users"

    // üè∞ Realm para auth challenge
    val realm = "dubium-jwt-realm"

    // ‚è∞ Duraci√≥n del token (30 d√≠as en milisegundos)
    val expirationTime = 30L * 24L * 60L * 60L * 1000L // 30 d√≠as
}

/**
 * Generar un nuevo token JWT para un usuario
 * @param userId - ID del usuario en la base de datos
 * @param username - nombre de usuario
 * @return String - token JWT listo para enviar al cliente
 */
fun generateToken(userId: Int, username: String): String {
    val config = JWTConfig()

    return JWT.create()
        .withAudience(config.audience)                    // Para qui√©n es el token
        .withIssuer(config.issuer)                        // Qui√©n lo emite
        .withClaim("userId", userId)                      // ID del usuario
        .withClaim("username", username)                  // Username del usuario
        .withIssuedAt(Date())                             // Cu√°ndo se cre√≥
        .withExpiresAt(Date(System.currentTimeMillis() + config.expirationTime)) // Cu√°ndo expira (30 d√≠as)
        .sign(Algorithm.HMAC256(config.secret))           // Firmar con clave secreta
}

/**
 * Extraer informaci√≥n del usuario desde un JWT token v√°lido
 * Utilidad para usar en endpoints protegidos
 * @param principal - JWTPrincipal obtenido del middleware de auth
 * @return UserTokenInfo - informaci√≥n del usuario extra√≠da del token
 */
fun extractUserFromToken(principal: JWTPrincipal): UserTokenInfo {
    return UserTokenInfo(
        userId = principal.payload.getClaim("userId").asInt(),
        username = principal.payload.getClaim("username").asString(),
        issuedAt = principal.payload.issuedAt,
        expiresAt = principal.payload.expiresAt
    )
}

/**
 * Data class con informaci√≥n del usuario extra√≠da del token
 */
data class UserTokenInfo(
    val userId: Int,
    val username: String,
    val issuedAt: Date?,
    val expiresAt: Date?
) {
    /**
     * Verificar si el token est√° cerca de expirar
     * @param hoursBeforeExpiry - horas antes de expiraci√≥n para considerar "cerca"
     * @return Boolean - true si expira pronto
     */
    fun isExpiringSoon(hoursBeforeExpiry: Long = 24): Boolean {
        val now = Date()
        val expiryThreshold = Date(now.time + (hoursBeforeExpiry * 60 * 60 * 1000))
        return expiresAt?.before(expiryThreshold) ?: false
    }

    /**
     * Obtener tiempo restante hasta expiraci√≥n en horas
     * @return Long - horas hasta expiraci√≥n (puede ser negativo si ya expir√≥)
     */
    fun hoursUntilExpiry(): Long {
        val now = Date()
        return if (expiresAt != null) {
            (expiresAt.time - now.time) / (60 * 60 * 1000)
        } else {
            0L
        }
    }
}

/**
 * Validar manualmente un token JWT (sin middleware)
 * √ötil para casos especiales o debugging
 * @param token - token JWT como string
 * @return UserTokenInfo? - informaci√≥n del usuario o null si token inv√°lido
 */
fun validateTokenManually(token: String): UserTokenInfo? {
    return try {
        val config = JWTConfig()

        val verifier = JWT.require(Algorithm.HMAC256(config.secret))
            .withAudience(config.audience)
            .withIssuer(config.issuer)
            .build()

        val decodedJWT = verifier.verify(token)

        UserTokenInfo(
            userId = decodedJWT.getClaim("userId").asInt(),
            username = decodedJWT.getClaim("username").asString(),
            issuedAt = decodedJWT.issuedAt,
            expiresAt = decodedJWT.expiresAt
        )

    } catch (e: Exception) {
        null
    }
}

/**
 * Generar un token de prueba para testing
 * ‚ö†Ô∏è Solo usar en desarrollo
 */
fun generateTestToken(userId: Int = 1, username: String = "testuser"): String {
    return generateToken(userId, username)
}

/**
 * Informaci√≥n sobre la configuraci√≥n JWT actual
 * √ötil para debugging y health checks
 */
fun getJWTInfo(): Map<String, Any> {
    val config = JWTConfig()
    return mapOf(
        "issuer" to config.issuer,
        "audience" to config.audience,
        "realm" to config.realm,
        "expirationDays" to (config.expirationTime / (24 * 60 * 60 * 1000)), // Convertir a d√≠as
        "algorithm" to "HMAC256"
    )
}